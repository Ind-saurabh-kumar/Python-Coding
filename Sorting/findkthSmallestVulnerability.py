# You can solve this in O(N log K) time where N is size of array.

# First notice that if we solve problem for min, the solution for max is same, just multiply original array elements by -1.

# So to solve this we need a data structure that supports: additions, deletions, 
# finding k-th item in collection, then we can just loop over all needed intervals 
# using sliding window, adding and deleting items when needed.

# Actually there are lots of structures that can support all those operations in O(log N) time, 
# you can use segment tree, min/max heaps, order statistic tree (a type of B-tree) and some others.

# In python, we use: 'sortedList' and in java we use 'TreeSet'.


from sortedcontainers import SortedList

def findKthVulnerability(k, m, arr):
    ans = []
    n = len(arr)
    sorted_list = SortedList(arr[:m])
    j = 0
    for i in range(m, n - m + 1):
        ans.append(sorted_list[k -1])
        sorted_list.remove(arr[j])
        sorted_list.add(arr[i])
        j += 1 
    return ans

k , m = 3, 4
vulnerability = [4, 2, 3, 1, 1]
print(findKthVulnerability(k, m, vulnerability))